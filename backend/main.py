from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import List, Dict, Any
import asyncio
import json
from datetime import datetime

# Importar as fun√ß√µes do nosso sistema de an√°lise
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from perplexity import graph, LicitationAnalysisState

app = FastAPI(title="Analisador de Licita√ß√µes API", version="1.0.0")

# Configurar CORS para permitir requisi√ß√µes do frontend
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:3001"],  # URLs do React
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

class AnalysisRequest(BaseModel):
    question: str

class AnalysisResponse(BaseModel):
    question: str
    analysis: str
    references: str
    thinking_process: str
    timestamp: str
    status: str

class QueryResult(BaseModel):
    title: str
    url: str
    resume: str

class AnalysisStep(BaseModel):
    step: str
    message: str
    timestamp: str

@app.get("/")
async def root():
    return {"message": "Analisador de Licita√ß√µes API - Lei 14.133/2021"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/analyze", response_model=AnalysisResponse)
async def analyze_licitation(request: AnalysisRequest):
    """
    Analisa uma pergunta sobre licita√ß√µes usando a Lei 14.133/2021 e Decreto 1.525/2022
    """
    try:
        # Executar o grafo de an√°lise
        result = graph.invoke({"user_input": request.question})
        
        # Extrair a resposta final
        final_response = result.get("final_response", "")
        
        # Separar o processo de pensamento da resposta final (se dispon√≠vel)
        thinking_process = ""
        analysis = final_response
        
        if "</think>" in final_response:
            parts = final_response.split("</think>")
            thinking_process = parts[0].replace("<think>", "").strip()
            analysis = parts[1].strip() if len(parts) > 1 else final_response
        
        # Extrair refer√™ncias (se houver)
        references = ""
        if "References:" in analysis:
            parts = analysis.split("References:")
            analysis = parts[0].strip()
            references = parts[1].strip() if len(parts) > 1 else ""
        
        return AnalysisResponse(
            question=request.question,
            analysis=analysis,
            references=references,
            thinking_process=thinking_process,
            timestamp=datetime.now().isoformat(),
            status="completed"
        )
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@app.post("/analyze/stream")
async def analyze_licitation_stream(request: AnalysisRequest):
    """
    Analisa uma pergunta sobre licita√ß√µes com streaming de progresso
    """
    try:
        steps = []
        
        # Simular streaming do processo de an√°lise
        async def stream_analysis():
            steps.append(AnalysisStep(
                step="build_queries",
                message="üîç Gerando consultas espec√≠ficas sobre licita√ß√µes...",
                timestamp=datetime.now().isoformat()
            ))
            yield {"type": "step", "data": steps[-1].dict()}
            
            await asyncio.sleep(1)  # Simular processamento
            
            steps.append(AnalysisStep(
                step="search",
                message="üìã Buscando informa√ß√µes na legisla√ß√£o oficial...",
                timestamp=datetime.now().isoformat()
            ))
            yield {"type": "step", "data": steps[-1].dict()}
            
            await asyncio.sleep(2)  # Simular processamento
            
            steps.append(AnalysisStep(
                step="analysis",
                message="‚úçÔ∏è Elaborando an√°lise t√©cnica...",
                timestamp=datetime.now().isoformat()
            ))
            yield {"type": "step", "data": steps[-1].dict()}
            
            await asyncio.sleep(1)  # Simular processamento
            
            # Executar an√°lise real
            result = graph.invoke({"user_input": request.question})
            final_response = result.get("final_response", "")
            
            # Processar resposta
            thinking_process = ""
            analysis = final_response
            
            if "</think>" in final_response:
                parts = final_response.split("</think>")
                thinking_process = parts[0].replace("<think>", "").strip()
                analysis = parts[1].strip() if len(parts) > 1 else final_response
            
            references = ""
            if "References:" in analysis:
                parts = analysis.split("References:")
                analysis = parts[0].strip()
                references = parts[1].strip() if len(parts) > 1 else ""
            
            yield {"type": "result", "data": {
                "question": request.question,
                "analysis": analysis,
                "references": references,
                "thinking_process": thinking_process,
                "timestamp": datetime.now().isoformat(),
                "status": "completed"
            }}
        
        return stream_analysis()
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Erro na an√°lise: {str(e)}")

@app.get("/examples")
async def get_example_questions():
    """
    Retorna exemplos de perguntas sobre licita√ß√µes
    """
    return {
        "examples": [
            "Como elaborar um Documento de Formaliza√ß√£o de Demanda (DFD)?",
            "Quais s√£o os requisitos para um Estudo T√©cnico Preliminar (ETP)?",
            "Como estruturar um Termo de Refer√™ncia (TR) para bens de consumo?",
            "Quais s√£o as modalidades de licita√ß√£o previstas na Lei 14.133/2021?",
            "Como funciona o processo de contrata√ß√£o integrada?",
            "Quais s√£o os crit√©rios de julgamento permitidos?",
            "Como elaborar especifica√ß√µes t√©cnicas detalhadas?",
            "Quais documentos s√£o obrigat√≥rios no processo licitat√≥rio?"
        ]
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)